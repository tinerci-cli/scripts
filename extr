#!/bin/bash

# Function to extract ZIP archive
extract_zip() {
	unzip "$1" -d "${2}"
}

# Function to extract TAR archive
extract_tar() {
	tar -xf "$1" -C "${2}"
}

# Function to extract GZIP-compressed TAR archive
extract_tar_gz() {
	tar -xzf "$1" -C "${2}"
}

# Function to extract BZIP2-compressed TAR archive
extract_tar_bz2() {
	tar -xjf "$1" -C "${2}"
}

# Function to extract XZ-compressed TAR archive
extract_tar_xz() {
	tar -xf "$1" -J -C "${2}"
}

# Main extraction function
extract_archive() {
	archive="$1"
	output_dir="${2}"

    # Create the output directory if it doesn't exist
    mkdir -p "$output_dir"

    # Detect the archive format and call the corresponding extraction function
    case "$archive" in
	    *.zip)
		    extract_zip "$archive" "$output_dir"
		    ;;
	    *.tar)
		    extract_tar "$archive" "$output_dir"
		    ;;
	    *.tar.gz | *.tgz)
		    extract_tar_gz "$archive" "$output_dir"
		    ;;
	    *.tar.bz2 | *.tbz2)
		    extract_tar_bz2 "$archive" "$output_dir"
		    ;;
	    *.tar.xz | *.txz)
		    extract_tar_xz "$archive" "$output_dir"
		    ;;
	    *)
		    echo "Unsupported archive format."
		    exit 1
		    ;;
    esac

    echo "Archive extracted successfully into ${output_dir}."
}

del_file() {
	echo "Delete $1 ? (y/n)"
	read answer

	if [ "$answer" != "${answer#[Yy]}" ] ;then
		rm "$1"
	else
		exit
	fi
}

# Check if an argument is provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <archive_file> [output_path]"
    exit 1
fi

# Set the output path to the provided argument or use the current directory
output_path="${2:-.}"

# Extract the provided archive
extract_archive "$1" "$output_path"

# Prompt to delete the archive
del_file "$1"

